services:
  redis:
    image: redis:latest
    restart: on-failure
    expose:
      - "6379"
    healthcheck:
      test: redis-cli ping

  db:
    image: postgres:latest
    restart: on-failure
    env_file:
      - .env
    expose:
      - "5432"
    volumes:
      - pg_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL","-c","pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 10s
      retries: 5
      timeout: 5s

  app:
    build: .
    tty: true
    ports:
      - "8000:8000"
    command: sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env

  web:
    build: .
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
        - .:/app
    ports:
        - "8000:8000"

    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  celery:
    build: .
    tty: true
    environment:
      - C_FORCE_ROOT=false
    command: celery -A config worker --loglevel=info
    restart: on-failure
    depends_on:
      - redis
      - db
      - app
    env_file:
      - .env

  celery-beat:
    build: .
    tty: true
    command: celery -A config beat -l info
    depends_on:
      db:
        condition: service_healthy  # ← Ждем пока БД станет доступна
      redis:
        condition: service_started
      web: # Ждем завершения миграций
        condition: service_started
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings
    env_file:
      - .env

volumes:
  pg_data: